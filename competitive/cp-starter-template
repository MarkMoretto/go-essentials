package main

/*****************************************************************************
Starter "template" for quick Go progams/scripts.

Includes some IO helpers, formatting constants, and slice/matrix objects.
Feel free to delete/modify to suit your needs.
*****************************************************************************/

import (
	"bufio"
	"fmt"
	"os"
)

const (
	NL string = "\n"
	CR string = "\r"
	NS string = ""
	WS string = " "
	bNL byte = '\n'
	MOD int = 1_000_000_007
)

// --- Format strings
var fdNL string = "%d\n"
var fdWS string = "%d "
var fsNL string = "%s\n"
var fsWS string = "%s "

func main() {
	defer wrtr.Flush()

	pd:=&fdNL
	var N int
	scanf(*pd,&N)

	// Slice with specifed size/capacity
	m := make([]int, N)

	// Slice with specified size of 0 and capacity of N.
	m := make([]int, 0, N)
	
	var nRows, nCols int = 2, 1
	var grid [][]int
	// Craete empty grid of n rows and n columns
	generateGrid(nRows, nCols, &grid)	

	// Fill the grid with some numbers
	var i = 0
	for r := range grid {
		for c := range grid[r] {
			grid[r][c] = i
			i++
		}
	}
	fmt.Println(grid)

	printf(*pd, N)
}

// Create a 2-d grid object.
func generateGrid(rowCount int, columnCount int, mm *[][]int) {
	*mm = make([][]int, rowCount)
	for i := range *mm {
		(*mm)[i] = make([]int, columnCount)
	}
}

// --- IO ---
var rdr *bufio.Reader = bufio.NewReader(os.Stdin)
func scanf(f string, a ...interface{}) { fmt.Fscanf(rdr, f, a...) }
var wrtr *bufio.Writer = bufio.NewWriter(os.Stdout)
func printf(f string, a ...interface{}) { fmt.Fprintf(wrtr, f, a...) }
